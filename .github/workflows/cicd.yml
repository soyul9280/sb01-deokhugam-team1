name: 덕후감 CICD 파이프라인

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev, main]

jobs:
  run_tests:
    name: 🧪 테스트 실행 및 Codecov 업로드
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 설치
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Gradle 테스트 및 JaCoCo 리포트 생성
        run: ./gradlew clean test jacocoTestReport

      - name: Codecov Action 실행
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          fail_ci_if_error: false

      - name: 테스트 완료 알림
        run: echo "::notice::테스트 및 커버리지 리포트 생성이 완료되었습니다."

  set_environment:
    name: 🔀 환경 설정
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: 환경 결정
        id: set-env
        run: |
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  build_and_push_docker_image:
    name: 🐳 Docker 이미지 빌드 및 푸시
    if: github.event.pull_request.merged == true && needs.set_environment.outputs.environment == 'prod'
    runs-on: ubuntu-latest
    needs: [set_environment]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set_environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: application-prod.yml 복호화
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML_BASE64 }}" | base64 --decode > src/main/resources/application-prod.yml

      - name: vision-key.json 복호화
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.VISION_KEY_JSON_BASE64 }}" | base64 --decode > src/main/resources/vision-key.json

      - name: AWS 인증 구성
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: 퍼블릭 ECR 로그인
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/b0y2f2j8

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Amazon ECR 로그인
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker buildx build --platform linux/amd64 \
            -t public.ecr.aws/b0y2f2j8/deokhugam:local-slim \
            --push .
  ecs_deploy:
    name: 🛡️ ECS 배포
    if: github.event.pull_request.merged == true && needs.set_environment.outputs.environment == 'prod'
    runs-on: ubuntu-latest
    needs: [set_environment, build_and_push_docker_image]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set_environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: AWS 인증 구성
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: 기존 Task 정의 가져오기 및 제거
        run: |
          set -e
          echo "기존 Task 정의 가져오기..."
          task_def_arn=$(aws ecs describe-services \
            --cluster deokhugam-cluster \
            --services deokhugam-service \
            --query 'services[0].taskDefinition' \
            --output text) || (echo "::error::ECS 서비스 조회 실패!" && exit 1)
          
          echo "기존 Task 정의 삭제..."
          aws ecs deregister-task-definition --task-definition "$task_def_arn" || (echo "::error::ECS Task 정의 삭제 실패!" && exit 1)

      - name: 새 Task 정의 등록
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/task-definition.json
          container-name: deokhugam-app
          image: public.ecr.aws/b0y2f2j8/deokhugam:local-slim

      - name: ECS 서비스 업데이트
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: deokhugam-service
          cluster: deokhugam-cluster
          task-definition: ecs/task-definition.json
          force-new-deployment: true