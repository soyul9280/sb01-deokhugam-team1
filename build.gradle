plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.25.0' // 빌드 시 코드 컨벤션 적용
    id 'jacoco'
}

group = 'com.codeit'
version = '0.0.1-SNAPSHOT'

//스프링 부트에서 bootJar가 jar파일 생성
tasks.named('bootJar'){
    archiveBaseName.set("duckhu")
    archiveVersion.set("1.2-M8")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //spring web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //lombok - test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.springframework.batch:spring-batch-test'

    // postgreSQL, H2 Database
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation "com.h2database:h2"
    runtimeOnly 'com.h2database:h2'

    //mapstruct
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //S3
    implementation 'software.amazon.awssdk:s3:2.31.7'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.581'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // OCR 기능을 위한 Tesseract 라이브러리, Google vision 라이브러리
    implementation 'net.sourceforge.tess4j:tess4j:5.4.0'
    implementation 'com.google.cloud:google-cloud-vision:3.30.0'

    //spring actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // session 통합테스트를 위한 HttpClient라이브러리
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.1'

    // Spring Batch Core
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // Spring Batch + JPA 연동
    implementation 'org.springframework.batch:spring-batch-infrastructure'

    // Spring Batch JPA Reader
    implementation 'org.springframework.batch:spring-batch-core'

    //prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

spotless {
    java {
        googleJavaFormat()
        target 'src/**/*.java'
    }
}

tasks.named('build') {
    dependsOn 'spotlessApply'  // ✅ build 전에 코드 포맷 자동 적용
}

jacoco {
    toolVersion = "0.8.10" // ➡️ 최신 버전 사용
}

tasks.named('test') {
    useJUnitPlatform()
    //현재 실패 테스트 케이스들이 많아 일시적으로 ignore설정 실패 테스트들 성공시 해당 코드 제거
    ignoreFailures = true
    finalizedBy 'jacocoTestReport'
}
clean {
    delete file('src/main/generated')
}

tasks.named('jacocoTestReport', JacocoReport).configure { report -> dependsOn test

    reports {
        xml.required.set(true)
        html.required.set(true)
    }

    // 커버리지 계산에서 제외할 패턴 Todo 현재 설정 고려중
    def excludes = [
            // DTO, Entity 같은 순수 데이터 구조
            "**/com/codeit/**/dto/**",
            // 예외 정의
            "**/com/codeit/**/exception/**",
            // MapStruct 등 매핑용 코드
            "**/com/codeit/**/mapper/**",
            // 애플리케이션 및 설정 클래스
            "**/com/codeit/**/*Application*.class",
            "**/com/codeit/**/config/**",
            // QueryDSL이 생성하는 Q- 클래스
            "**/com/codeit/**/Q*.class",

            // 3) 글로벌 공통 유틸티
            "**/com/codeit/**/logging/**",
            "**/com/codeit/**/response/**",
            "**/com/codeit/**/type/**"
    ]

    classDirectories.setFrom(
            files(classDirectories.files.collect { file ->
                fileTree(dir: file, exclude: excludes)
            })
    )
}
